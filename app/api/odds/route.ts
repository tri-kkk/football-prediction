export const dynamic = 'force-dynamic'

interface OddsOutcome {
  name: string
  price: number
}

interface OddsMarket {
  key: string
  outcomes: OddsOutcome[]
}

interface Bookmaker {
  key: string
  title: string
  markets: OddsMarket[]
}

interface OddsAPIMatch {
  id: string
  sport_key: string
  sport_title: string
  commence_time: string
  home_team: string
  away_team: string
  bookmakers: Bookmaker[]
}

interface ProcessedOdds {
  matchId: string
  homeTeam: string
  awayTeam: string
  homeOdds: number
  drawOdds: number
  awayOdds: number
  homeProbability: number
  drawProbability: number
  awayProbability: number
  timestamp: string
  commenceTime: string
}

function oddsToImpliedProbability(odds: number): number {
  // Ïò§Ï¶àÎ•º ÌôïÎ•†Î°ú Î≥ÄÌôò (%)
  return (1 / odds) * 100
}

function normalizeTeamName(name: string): string {
  // ÌåÄ Ïù¥Î¶Ñ Ï†ïÍ∑úÌôî (Îß§Ïπ≠Ïö©)
  return name
    .toLowerCase()
    .replace(/\s+/g, '-')
    .replace(/[^a-z0-9-]/g, '')
}

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url)
    const sport = searchParams.get('sport') || 'soccer_epl' // Í∏∞Î≥∏: EPL
    
    const API_KEY = process.env.ODDS_API_KEY
    
    if (!API_KEY) {
      console.warn('‚ö†Ô∏è ODDS_API_KEY not found - using dummy data')
      
      // Fallback: ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞
      return Response.json({
        success: true,
        data: [
          {
            matchId: 'dummy-1',
            homeTeam: 'Manchester United',
            awayTeam: 'Liverpool',
            homeOdds: 2.5,
            drawOdds: 3.2,
            awayOdds: 2.8,
            homeProbability: 40,
            drawProbability: 31.25,
            awayProbability: 35.71,
            timestamp: new Date().toISOString(),
            commenceTime: new Date(Date.now() + 86400000).toISOString()
          },
          {
            matchId: 'dummy-2',
            homeTeam: 'Arsenal',
            awayTeam: 'Chelsea',
            homeOdds: 2.1,
            drawOdds: 3.5,
            awayOdds: 3.4,
            homeProbability: 47.6,
            drawProbability: 28.6,
            awayProbability: 29.4,
            timestamp: new Date().toISOString(),
            commenceTime: new Date(Date.now() + 172800000).toISOString()
          }
        ],
        source: 'dummy',
        remainingRequests: 'N/A'
      })
    }
    
    console.log('üîç Fetching odds from The Odds API...')
    console.log('Sport:', sport)
    
    const response = await fetch(
      `https://api.the-odds-api.com/v4/sports/${sport}/odds/?` +
      `apiKey=${API_KEY}&regions=eu&markets=h2h&oddsFormat=decimal`,
      { 
        next: { revalidate: 3600 }, // 1ÏãúÍ∞Ñ Ï∫êÏã±
        headers: { 'Accept': 'application/json' }
      }
    )
    
    // API ÏÇ¨Ïö©Îüâ Ï≤¥ÌÅ¨
    const remainingRequests = response.headers.get('x-requests-remaining')
    const usedRequests = response.headers.get('x-requests-used')
    
    console.log('üìä API Usage:', {
      remaining: remainingRequests,
      used: usedRequests
    })
    
    if (!response.ok) {
      throw new Error(`API error: ${response.status} ${response.statusText}`)
    }
    
    const data: OddsAPIMatch[] = await response.json()
    
    console.log(`‚úÖ Received ${data.length} matches`)
    
    const oddsData: ProcessedOdds[] = data
      .map((match) => {
        // Ï≤´ Î≤àÏß∏ Î∂ÅÎ©îÏù¥Ïª§ ÏÇ¨Ïö© (Î≥¥ÌÜµ Í∞ÄÏû• Ïã†Î¢∞Ìï†ÎßåÌï®)
        const bookmaker = match.bookmakers?.[0]
        if (!bookmaker) {
          console.warn(`‚ö†Ô∏è No bookmaker data for match: ${match.home_team} vs ${match.away_team}`)
          return null
        }
        
        // h2h ÎßàÏºì Ï∞æÍ∏∞
        const h2hMarket = bookmaker.markets.find(m => m.key === 'h2h')
        if (!h2hMarket || h2hMarket.outcomes.length < 2) {
          console.warn(`‚ö†Ô∏è No h2h market for match: ${match.home_team} vs ${match.away_team}`)
          return null
        }
        
        const outcomes = h2hMarket.outcomes
        
        // Ìôà/Î¨¥ÏäπÎ∂Ä/ÏõêÏ†ï Ïò§Ï¶à Ï∞æÍ∏∞
        const homeOutcome = outcomes.find(o => o.name === match.home_team)
        const awayOutcome = outcomes.find(o => o.name === match.away_team)
        const drawOutcome = outcomes.find(o => o.name === 'Draw')
        
        // Ïò§Ï¶àÍ∞Ä ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
        const homeOdds = homeOutcome?.price || 2.5
        const drawOdds = drawOutcome?.price || 3.0
        const awayOdds = awayOutcome?.price || 2.5
        
        // ÌôïÎ•† Í≥ÑÏÇ∞
        const homeProbability = oddsToImpliedProbability(homeOdds)
        const drawProbability = oddsToImpliedProbability(drawOdds)
        const awayProbability = oddsToImpliedProbability(awayOdds)
        
        // Ï¥ùÌï©Ïù¥ 100%Í∞Ä ÎÑòÏúºÎ©¥ Ï†ïÍ∑úÌôî (Î∂ÅÎ©îÏù¥Ïª§ ÎßàÏßÑ Ï†úÍ±∞)
        const total = homeProbability + drawProbability + awayProbability
        const normalizedHome = (homeProbability / total) * 100
        const normalizedDraw = (drawProbability / total) * 100
        const normalizedAway = (awayProbability / total) * 100
        
        return {
          matchId: match.id,
          homeTeam: match.home_team,
          awayTeam: match.away_team,
          homeOdds: Number(homeOdds.toFixed(2)),
          drawOdds: Number(drawOdds.toFixed(2)),
          awayOdds: Number(awayOdds.toFixed(2)),
          homeProbability: Number(normalizedHome.toFixed(1)),
          drawProbability: Number(normalizedDraw.toFixed(1)),
          awayProbability: Number(normalizedAway.toFixed(1)),
          timestamp: new Date().toISOString(),
          commenceTime: match.commence_time
        }
      })
      .filter((item): item is ProcessedOdds => item !== null)
    
    console.log(`‚úÖ Processed ${oddsData.length} matches with odds`)
    
    return Response.json({
      success: true,
      data: oddsData,
      source: 'the-odds-api',
      remainingRequests: remainingRequests || 'Unknown',
      usedRequests: usedRequests || 'Unknown'
    })
    
  } catch (error) {
    console.error('‚ùå Odds API Error:', error)
    return Response.json(
      { 
        success: false,
        error: 'Failed to fetch odds',
        message: error instanceof Error ? error.message : 'Unknown error'
      }, 
      { status: 500 }
    )
  }
}
